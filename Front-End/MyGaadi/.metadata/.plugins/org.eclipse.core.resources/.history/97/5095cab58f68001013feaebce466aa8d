package com.mygaadi.service;

import com.mygaadi.dao.CarDao;
import com.mygaadi.dao.UserDao;
import com.mygaadi.dto.CarRequestDTO;
import com.mygaadi.dto.CarResponseDTO;
import com.mygaadi.entities.Car;
import com.mygaadi.entities.User;
import com.mygaadi.security.JwtUtil;
import com.mygaadi.custom_exceptions.ResourceNotFoundException;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class CarServiceImpl implements CarService {

    @Autowired
    private CarDao carDao;

    @Autowired
    private UserDao userDao;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public CarResponseDTO addCar(CarRequestDTO dto, MultipartFile[] images, String token) {
        String email = jwtUtil.extractEmail(token.replace("Bearer ", ""));
        User seller = userDao.findByEmail(email)
            .orElseThrow(() -> new ResourceNotFoundException("User not found with email: " + email));

        Car car = modelMapper.map(dto, Car.class);
        car.setSeller(seller);
        car.setCreatedAt(LocalDateTime.now());

        List<String> imagePaths = new ArrayList<>();
        if (images != null && images.length > 0) {
            try {
                String uploadDir = System.getProperty("user.dir") + "/uploads/";
                Files.createDirectories(Paths.get(uploadDir));

                for (MultipartFile file : images) {
                    String filename = UUID.randomUUID() + "_" + file.getOriginalFilename();
                    Path uploadPath = Paths.get(uploadDir + filename);
                    Files.write(uploadPath, file.getBytes());
                    imagePaths.add("/uploads/" + filename);
                }
            } catch (IOException e) {
                throw new RuntimeException("Failed to save images", e);
            }
        }

        car.setImageUrls(imagePaths);
        Car saved = carDao.save(car);
        return modelMapper.map(saved, CarResponseDTO.class);
    }
}

